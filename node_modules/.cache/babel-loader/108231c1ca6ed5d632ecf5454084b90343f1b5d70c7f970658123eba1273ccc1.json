{"ast":null,"code":"var _jsxFileName = \"/home/rober/space-apps/src/components/Planet3D.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\nimport './Planet3D.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetMesh = ({\n  color = '#4a90e2',\n  size = 1,\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 0.3,\n  mountainHeight = 0.1,\n  surfaceDetail = 0.5\n}) => {\n  _s();\n  const meshRef = useRef(null);\n\n  // Generar geometría procedural con relieves y cráteres\n  const geometry = useMemo(() => {\n    const sphereGeometry = new THREE.SphereGeometry(size, 128, 128);\n    const positions = sphereGeometry.attributes.position.array;\n    const normals = sphereGeometry.attributes.normal.array;\n\n    // Aplicar ruido para crear relieves naturales\n    for (let i = 0; i < positions.length; i += 3) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      const z = positions[i + 2];\n\n      // Crear coordenadas esféricas para el ruido\n      const phi = Math.acos(y / size);\n      const theta = Math.atan2(z, x);\n\n      // Ruido de relieve base\n      const noise1 = Math.sin(phi * 8 + theta * 8) * 0.02 * surfaceDetail;\n      const noise2 = Math.sin(phi * 16 + theta * 16) * 0.01 * surfaceDetail;\n      const noise3 = Math.sin(phi * 32 + theta * 32) * 0.005 * surfaceDetail;\n\n      // Montañas\n      const mountainNoise = Math.sin(phi * 4 + theta * 4) * mountainHeight;\n      const mountainMask = Math.max(0, Math.sin(phi * 2) * Math.sin(theta * 3));\n\n      // Cráteres\n      let craterEffect = 0;\n      const craterCount = Math.floor(craterDensity * 20);\n      for (let c = 0; c < craterCount; c++) {\n        const craterPhi = Math.random() * Math.PI;\n        const craterTheta = Math.random() * Math.PI * 2;\n        const craterX = Math.sin(craterPhi) * Math.cos(craterTheta);\n        const craterY = Math.cos(craterPhi);\n        const craterZ = Math.sin(craterPhi) * Math.sin(craterTheta);\n        const distance = Math.sqrt(Math.pow(x - craterX, 2) + Math.pow(y - craterY, 2) + Math.pow(z - craterZ, 2));\n        if (distance < 0.3) {\n          const craterDepth = (0.3 - distance) / 0.3 * 0.05;\n          craterEffect += craterDepth;\n        }\n      }\n      const totalEffect = noise1 + noise2 + noise3 + mountainNoise * mountainMask - craterEffect;\n\n      // Aplicar el efecto a la posición\n      const normalX = normals[i];\n      const normalY = normals[i + 1];\n      const normalZ = normals[i + 2];\n      positions[i] += normalX * totalEffect;\n      positions[i + 1] += normalY * totalEffect;\n      positions[i + 2] += normalZ * totalEffect;\n    }\n    sphereGeometry.attributes.position.needsUpdate = true;\n    sphereGeometry.computeVertexNormals();\n    return sphereGeometry;\n  }, [size, craterDensity, mountainHeight, surfaceDetail]);\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += delta * rotationSpeed;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: color,\n      wireframe: wireframe,\n      metalness: metalness,\n      roughness: roughness,\n      normalScale: new THREE.Vector2(0.5, 0.5)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetMesh, \"MielR1GGzeR4Ze9WbCt4SpjEbj8=\", false, function () {\n  return [useFrame];\n});\n_c = PlanetMesh;\nconst Planet3D = ({\n  color = '#4a90e2',\n  size = 1,\n  lightIntensity = 1,\n  lightColor = '#ffffff',\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planet-container\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 5],\n        fov: 75\n      },\n      style: {\n        width: '100%',\n        height: '500px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        position: [10, 10, 5],\n        intensity: lightIntensity,\n        color: lightColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [-10, -10, -5],\n        intensity: 0.5,\n        color: lightColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlanetMesh, {\n        color: color,\n        size: size,\n        rotationSpeed: rotationSpeed,\n        wireframe: wireframe,\n        metalness: metalness,\n        roughness: roughness\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enablePan: true,\n        enableZoom: true,\n        enableRotate: true,\n        autoRotate: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Environment, {\n        preset: \"night\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Planet3D;\nexport default Planet3D;\nvar _c, _c2;\n$RefreshReg$(_c, \"PlanetMesh\");\n$RefreshReg$(_c2, \"Planet3D\");","map":{"version":3,"names":["React","useRef","useMemo","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","PlanetMesh","color","size","rotationSpeed","wireframe","metalness","roughness","craterDensity","mountainHeight","surfaceDetail","_s","meshRef","geometry","sphereGeometry","SphereGeometry","positions","attributes","position","array","normals","normal","i","length","x","y","z","phi","Math","acos","theta","atan2","noise1","sin","noise2","noise3","mountainNoise","mountainMask","max","craterEffect","craterCount","floor","c","craterPhi","random","PI","craterTheta","craterX","cos","craterY","craterZ","distance","sqrt","pow","craterDepth","totalEffect","normalX","normalY","normalZ","needsUpdate","computeVertexNormals","state","delta","current","rotation","ref","children","normalScale","Vector2","fileName","_jsxFileName","lineNumber","columnNumber","_c","Planet3D","lightIntensity","lightColor","className","camera","fov","style","width","height","intensity","enablePan","enableZoom","enableRotate","autoRotate","preset","_c2","$RefreshReg$"],"sources":["/home/rober/space-apps/src/components/Planet3D.tsx"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Sphere, OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\nimport './Planet3D.css';\n\ninterface Planet3DProps {\n  color?: string;\n  size?: number;\n  lightIntensity?: number;\n  lightColor?: string;\n  rotationSpeed?: number;\n  wireframe?: boolean;\n  metalness?: number;\n  roughness?: number;\n  craterDensity?: number;\n  mountainHeight?: number;\n  surfaceDetail?: number;\n}\n\nconst PlanetMesh: React.FC<Planet3DProps> = ({ \n  color = '#4a90e2', \n  size = 1, \n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 0.3,\n  mountainHeight = 0.1,\n  surfaceDetail = 0.5\n}) => {\n  const meshRef = useRef<THREE.Mesh>(null);\n\n  // Generar geometría procedural con relieves y cráteres\n  const geometry = useMemo(() => {\n    const sphereGeometry = new THREE.SphereGeometry(size, 128, 128);\n    const positions = sphereGeometry.attributes.position.array as Float32Array;\n    const normals = sphereGeometry.attributes.normal.array as Float32Array;\n    \n    // Aplicar ruido para crear relieves naturales\n    for (let i = 0; i < positions.length; i += 3) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      const z = positions[i + 2];\n      \n      // Crear coordenadas esféricas para el ruido\n      const phi = Math.acos(y / size);\n      const theta = Math.atan2(z, x);\n      \n      // Ruido de relieve base\n      const noise1 = Math.sin(phi * 8 + theta * 8) * 0.02 * surfaceDetail;\n      const noise2 = Math.sin(phi * 16 + theta * 16) * 0.01 * surfaceDetail;\n      const noise3 = Math.sin(phi * 32 + theta * 32) * 0.005 * surfaceDetail;\n      \n      // Montañas\n      const mountainNoise = Math.sin(phi * 4 + theta * 4) * mountainHeight;\n      const mountainMask = Math.max(0, Math.sin(phi * 2) * Math.sin(theta * 3));\n      \n      // Cráteres\n      let craterEffect = 0;\n      const craterCount = Math.floor(craterDensity * 20);\n      for (let c = 0; c < craterCount; c++) {\n        const craterPhi = Math.random() * Math.PI;\n        const craterTheta = Math.random() * Math.PI * 2;\n        const craterX = Math.sin(craterPhi) * Math.cos(craterTheta);\n        const craterY = Math.cos(craterPhi);\n        const craterZ = Math.sin(craterPhi) * Math.sin(craterTheta);\n        \n        const distance = Math.sqrt(\n          Math.pow(x - craterX, 2) + \n          Math.pow(y - craterY, 2) + \n          Math.pow(z - craterZ, 2)\n        );\n        \n        if (distance < 0.3) {\n          const craterDepth = (0.3 - distance) / 0.3 * 0.05;\n          craterEffect += craterDepth;\n        }\n      }\n      \n      const totalEffect = noise1 + noise2 + noise3 + (mountainNoise * mountainMask) - craterEffect;\n      \n      // Aplicar el efecto a la posición\n      const normalX = normals[i];\n      const normalY = normals[i + 1];\n      const normalZ = normals[i + 2];\n      \n      positions[i] += normalX * totalEffect;\n      positions[i + 1] += normalY * totalEffect;\n      positions[i + 2] += normalZ * totalEffect;\n    }\n    \n    sphereGeometry.attributes.position.needsUpdate = true;\n    sphereGeometry.computeVertexNormals();\n    \n    return sphereGeometry;\n  }, [size, craterDensity, mountainHeight, surfaceDetail]);\n\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += delta * rotationSpeed;\n    }\n  });\n\n  return (\n    <mesh ref={meshRef} geometry={geometry}>\n      <meshStandardMaterial\n        color={color}\n        wireframe={wireframe}\n        metalness={metalness}\n        roughness={roughness}\n        normalScale={new THREE.Vector2(0.5, 0.5)}\n      />\n    </mesh>\n  );\n};\n\nconst Planet3D: React.FC<Planet3DProps> = ({\n  color = '#4a90e2',\n  size = 1,\n  lightIntensity = 1,\n  lightColor = '#ffffff',\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8\n}) => {\n  return (\n    <div className=\"planet-container\">\n      <Canvas\n        camera={{ position: [0, 0, 5], fov: 75 }}\n        style={{ width: '100%', height: '500px' }}\n      >\n        <ambientLight intensity={0.2} />\n        <directionalLight\n          position={[10, 10, 5]}\n          intensity={lightIntensity}\n          color={lightColor}\n        />\n        <pointLight position={[-10, -10, -5]} intensity={0.5} color={lightColor} />\n        \n        <PlanetMesh\n          color={color}\n          size={size}\n          rotationSpeed={rotationSpeed}\n          wireframe={wireframe}\n          metalness={metalness}\n          roughness={roughness}\n        />\n        \n        <OrbitControls\n          enablePan={true}\n          enableZoom={true}\n          enableRotate={true}\n          autoRotate={false}\n        />\n        \n        <Environment preset=\"night\" />\n      </Canvas>\n    </div>\n  );\n};\n\nexport default Planet3D;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}