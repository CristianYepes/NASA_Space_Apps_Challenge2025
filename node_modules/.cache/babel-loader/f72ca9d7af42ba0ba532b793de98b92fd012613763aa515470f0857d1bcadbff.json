{"ast":null,"code":"var _jsxFileName = \"/home/rober/space-apps/src/components/Planet3D.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Sphere, OrbitControls, Environment } from '@react-three/drei';\nimport './Planet3D.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetMesh = ({\n  color = '#4a90e2',\n  size = 1,\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8\n}) => {\n  _s();\n  const meshRef = useRef(null);\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += delta * rotationSpeed;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Sphere, {\n    ref: meshRef,\n    args: [size, 64, 64],\n    children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: color,\n      wireframe: wireframe,\n      metalness: metalness,\n      roughness: roughness\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetMesh, \"/vg1AmA8+P3+Fj0/y210JTVKtL0=\", false, function () {\n  return [useFrame];\n});\n_c = PlanetMesh;\nconst Planet3D = ({\n  color = '#4a90e2',\n  size = 1,\n  lightIntensity = 1,\n  lightColor = '#ffffff',\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planet-container\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 5],\n        fov: 75\n      },\n      style: {\n        width: '100%',\n        height: '500px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        position: [10, 10, 5],\n        intensity: lightIntensity,\n        color: lightColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [-10, -10, -5],\n        intensity: 0.5,\n        color: lightColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlanetMesh, {\n        color: color,\n        size: size,\n        rotationSpeed: rotationSpeed,\n        wireframe: wireframe,\n        metalness: metalness,\n        roughness: roughness\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enablePan: true,\n        enableZoom: true,\n        enableRotate: true,\n        autoRotate: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Environment, {\n        preset: \"space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Planet3D;\nexport default Planet3D;\nvar _c, _c2;\n$RefreshReg$(_c, \"PlanetMesh\");\n$RefreshReg$(_c2, \"Planet3D\");","map":{"version":3,"names":["React","useRef","Canvas","useFrame","Sphere","OrbitControls","Environment","jsxDEV","_jsxDEV","PlanetMesh","color","size","rotationSpeed","wireframe","metalness","roughness","_s","meshRef","state","delta","current","rotation","y","ref","args","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Planet3D","lightIntensity","lightColor","className","camera","position","fov","style","width","height","intensity","enablePan","enableZoom","enableRotate","autoRotate","preset","_c2","$RefreshReg$"],"sources":["/home/rober/space-apps/src/components/Planet3D.tsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Sphere, OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\nimport './Planet3D.css';\n\ninterface Planet3DProps {\n  color?: string;\n  size?: number;\n  lightIntensity?: number;\n  lightColor?: string;\n  rotationSpeed?: number;\n  wireframe?: boolean;\n  metalness?: number;\n  roughness?: number;\n}\n\nconst PlanetMesh: React.FC<Planet3DProps> = ({ \n  color = '#4a90e2', \n  size = 1, \n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8\n}) => {\n  const meshRef = useRef<THREE.Mesh>(null);\n\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += delta * rotationSpeed;\n    }\n  });\n\n  return (\n    <Sphere ref={meshRef} args={[size, 64, 64]}>\n      <meshStandardMaterial\n        color={color}\n        wireframe={wireframe}\n        metalness={metalness}\n        roughness={roughness}\n      />\n    </Sphere>\n  );\n};\n\nconst Planet3D: React.FC<Planet3DProps> = ({\n  color = '#4a90e2',\n  size = 1,\n  lightIntensity = 1,\n  lightColor = '#ffffff',\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8\n}) => {\n  return (\n    <div className=\"planet-container\">\n      <Canvas\n        camera={{ position: [0, 0, 5], fov: 75 }}\n        style={{ width: '100%', height: '500px' }}\n      >\n        <ambientLight intensity={0.2} />\n        <directionalLight\n          position={[10, 10, 5]}\n          intensity={lightIntensity}\n          color={lightColor}\n        />\n        <pointLight position={[-10, -10, -5]} intensity={0.5} color={lightColor} />\n        \n        <PlanetMesh\n          color={color}\n          size={size}\n          rotationSpeed={rotationSpeed}\n          wireframe={wireframe}\n          metalness={metalness}\n          roughness={roughness}\n        />\n        \n        <OrbitControls\n          enablePan={true}\n          enableZoom={true}\n          enableRotate={true}\n          autoRotate={false}\n        />\n        \n        <Environment preset=\"space\" />\n      </Canvas>\n    </div>\n  );\n};\n\nexport default Planet3D;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}