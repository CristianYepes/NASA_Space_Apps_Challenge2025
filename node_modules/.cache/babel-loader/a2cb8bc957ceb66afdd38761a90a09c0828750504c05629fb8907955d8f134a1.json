{"ast":null,"code":"var _jsxFileName = \"/home/rober/space-apps/src/components/Planet3D.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\nimport './Planet3D.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetMesh = ({\n  color = '#4a90e2',\n  size = 1,\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 1.0,\n  mountainHeight = 0.1\n}) => {\n  _s();\n  const meshRef = useRef(null);\n\n  // Generar geometría procedural con relieve lunar realista\n  const geometry = useMemo(() => {\n    const sphereGeometry = new THREE.SphereGeometry(size, 128, 128);\n    const positions = sphereGeometry.attributes.position.array;\n    const normals = sphereGeometry.attributes.normal.array;\n\n    // Crear relieve base con ruido orgánico (no espiral)\n    for (let i = 0; i < positions.length; i += 3) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      const z = positions[i + 2];\n\n      // Crear coordenadas esféricas para el ruido\n      const phi = Math.acos(y / size);\n      const theta = Math.atan2(z, x);\n\n      // Ruido orgánico multi-octava (como la superficie lunar)\n      const noise1 = Math.sin(phi * 12 + theta * 12) * 0.015;\n      const noise2 = Math.sin(phi * 24 + theta * 24) * 0.008;\n      const noise3 = Math.sin(phi * 48 + theta * 48) * 0.004;\n      const noise4 = Math.sin(phi * 96 + theta * 96) * 0.002;\n\n      // Ruido de textura fina\n      const fineNoise = Math.sin(phi * 200 + theta * 200) * 0.001;\n\n      // Combinar ruidos para relieve natural\n      const baseRelief = noise1 + noise2 + noise3 + noise4 + fineNoise;\n\n      // Aplicar el relieve base\n      const normalX = normals[i];\n      const normalY = normals[i + 1];\n      const normalZ = normals[i + 2];\n      positions[i] += normalX * baseRelief;\n      positions[i + 1] += normalY * baseRelief;\n      positions[i + 2] += normalZ * baseRelief;\n    }\n\n    // Crear montañas lunares (cordilleras y picos)\n    const mountainCount = Math.floor(mountainHeight * 8);\n    const mountains = [];\n    for (let m = 0; m < mountainCount; m++) {\n      const phi = Math.random() * Math.PI;\n      const theta = Math.random() * Math.PI * 2;\n      const x = Math.sin(phi) * Math.cos(theta);\n      const y = Math.cos(phi);\n      const z = Math.sin(phi) * Math.sin(theta);\n      mountains.push({\n        x,\n        y,\n        z,\n        height: 0.03 + Math.random() * 0.08,\n        radius: 0.1 + Math.random() * 0.2\n      });\n    }\n\n    // Crear cráteres lunares realistas\n    const craterCount = Math.floor(craterDensity * 100);\n    const craters = [];\n    for (let c = 0; c < craterCount; c++) {\n      const phi = Math.random() * Math.PI;\n      const theta = Math.random() * Math.PI * 2;\n      const x = Math.sin(phi) * Math.cos(theta);\n      const y = Math.cos(phi);\n      const z = Math.sin(phi) * Math.sin(theta);\n\n      // Distribución realista de cráteres lunares\n      const sizeRandom = Math.random();\n      let radius, depth;\n      if (sizeRandom < 0.7) {\n        // 70% cráteres pequeños\n        radius = 0.01 + Math.random() * 0.03;\n        depth = 0.003 + Math.random() * 0.01;\n      } else if (sizeRandom < 0.9) {\n        // 20% cráteres medianos\n        radius = 0.03 + Math.random() * 0.05;\n        depth = 0.008 + Math.random() * 0.02;\n      } else {\n        // 10% cráteres grandes\n        radius = 0.05 + Math.random() * 0.1;\n        depth = 0.015 + Math.random() * 0.03;\n      }\n      craters.push({\n        x,\n        y,\n        z,\n        depth,\n        radius\n      });\n    }\n\n    // Aplicar montañas y cráteres sobre el relieve base\n    for (let i = 0; i < positions.length; i += 3) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      const z = positions[i + 2];\n      let totalEffect = 0;\n\n      // Aplicar montañas\n      for (const mountain of mountains) {\n        const distance = Math.sqrt(Math.pow(x - mountain.x, 2) + Math.pow(y - mountain.y, 2) + Math.pow(z - mountain.z, 2));\n        if (distance < mountain.radius) {\n          const normalizedDistance = distance / mountain.radius;\n          const smoothTransition = Math.pow(1 - normalizedDistance, 2);\n          const mountainEffect = smoothTransition * mountain.height;\n          totalEffect += mountainEffect;\n        }\n      }\n\n      // Aplicar cráteres\n      for (const crater of craters) {\n        const distance = Math.sqrt(Math.pow(x - crater.x, 2) + Math.pow(y - crater.y, 2) + Math.pow(z - crater.z, 2));\n        if (distance < crater.radius) {\n          const normalizedDistance = distance / crater.radius;\n          const smoothTransition = Math.pow(1 - normalizedDistance, 1.8);\n          const craterEffect = smoothTransition * crater.depth;\n          totalEffect -= craterEffect;\n        }\n      }\n\n      // Aplicar el efecto a la posición\n      const normalX = normals[i];\n      const normalY = normals[i + 1];\n      const normalZ = normals[i + 2];\n      positions[i] += normalX * totalEffect;\n      positions[i + 1] += normalY * totalEffect;\n      positions[i + 2] += normalZ * totalEffect;\n    }\n    sphereGeometry.attributes.position.needsUpdate = true;\n    sphereGeometry.computeVertexNormals();\n    return sphereGeometry;\n  }, [size, craterDensity, mountainHeight]);\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += delta * rotationSpeed;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: color,\n      wireframe: wireframe,\n      metalness: metalness,\n      roughness: roughness,\n      normalScale: new THREE.Vector2(0.5, 0.5)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetMesh, \"MielR1GGzeR4Ze9WbCt4SpjEbj8=\", false, function () {\n  return [useFrame];\n});\n_c = PlanetMesh;\nconst Planet3D = ({\n  color = '#4a90e2',\n  size = 1,\n  lightIntensity = 1,\n  lightColor = '#ffffff',\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 1.0,\n  mountainHeight = 0.1\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planet-container\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 5],\n        fov: 75\n      },\n      style: {\n        width: '100%',\n        height: '500px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        position: [10, 10, 5],\n        intensity: lightIntensity,\n        color: lightColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [-10, -10, -5],\n        intensity: 0.5,\n        color: lightColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlanetMesh, {\n        color: color,\n        size: size,\n        rotationSpeed: rotationSpeed,\n        wireframe: wireframe,\n        metalness: metalness,\n        roughness: roughness,\n        craterDensity: craterDensity,\n        mountainHeight: mountainHeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enablePan: true,\n        enableZoom: true,\n        enableRotate: true,\n        autoRotate: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Environment, {\n        preset: \"night\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Planet3D;\nexport default Planet3D;\nvar _c, _c2;\n$RefreshReg$(_c, \"PlanetMesh\");\n$RefreshReg$(_c2, \"Planet3D\");","map":{"version":3,"names":["React","useRef","useMemo","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","PlanetMesh","color","size","rotationSpeed","wireframe","metalness","roughness","craterDensity","mountainHeight","_s","meshRef","geometry","sphereGeometry","SphereGeometry","positions","attributes","position","array","normals","normal","i","length","x","y","z","phi","Math","acos","theta","atan2","noise1","sin","noise2","noise3","noise4","fineNoise","baseRelief","normalX","normalY","normalZ","mountainCount","floor","mountains","m","random","PI","cos","push","height","radius","craterCount","craters","c","sizeRandom","depth","totalEffect","mountain","distance","sqrt","pow","normalizedDistance","smoothTransition","mountainEffect","crater","craterEffect","needsUpdate","computeVertexNormals","state","delta","current","rotation","ref","children","normalScale","Vector2","fileName","_jsxFileName","lineNumber","columnNumber","_c","Planet3D","lightIntensity","lightColor","className","camera","fov","style","width","intensity","enablePan","enableZoom","enableRotate","autoRotate","preset","_c2","$RefreshReg$"],"sources":["/home/rober/space-apps/src/components/Planet3D.tsx"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Sphere, OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\nimport './Planet3D.css';\n\ninterface Planet3DProps {\n  color?: string;\n  size?: number;\n  lightIntensity?: number;\n  lightColor?: string;\n  rotationSpeed?: number;\n  wireframe?: boolean;\n  metalness?: number;\n  roughness?: number;\n  craterDensity?: number;\n  mountainHeight?: number;\n}\n\nconst PlanetMesh: React.FC<Planet3DProps> = ({ \n  color = '#4a90e2', \n  size = 1, \n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 1.0,\n  mountainHeight = 0.1\n}) => {\n  const meshRef = useRef<THREE.Mesh>(null);\n\n  // Generar geometría procedural con relieve lunar realista\n  const geometry = useMemo(() => {\n    const sphereGeometry = new THREE.SphereGeometry(size, 128, 128);\n    const positions = sphereGeometry.attributes.position.array as Float32Array;\n    const normals = sphereGeometry.attributes.normal.array as Float32Array;\n    \n    // Crear relieve base con ruido orgánico (no espiral)\n    for (let i = 0; i < positions.length; i += 3) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      const z = positions[i + 2];\n      \n      // Crear coordenadas esféricas para el ruido\n      const phi = Math.acos(y / size);\n      const theta = Math.atan2(z, x);\n      \n      // Ruido orgánico multi-octava (como la superficie lunar)\n      const noise1 = Math.sin(phi * 12 + theta * 12) * 0.015;\n      const noise2 = Math.sin(phi * 24 + theta * 24) * 0.008;\n      const noise3 = Math.sin(phi * 48 + theta * 48) * 0.004;\n      const noise4 = Math.sin(phi * 96 + theta * 96) * 0.002;\n      \n      // Ruido de textura fina\n      const fineNoise = Math.sin(phi * 200 + theta * 200) * 0.001;\n      \n      // Combinar ruidos para relieve natural\n      const baseRelief = noise1 + noise2 + noise3 + noise4 + fineNoise;\n      \n      // Aplicar el relieve base\n      const normalX = normals[i];\n      const normalY = normals[i + 1];\n      const normalZ = normals[i + 2];\n      \n      positions[i] += normalX * baseRelief;\n      positions[i + 1] += normalY * baseRelief;\n      positions[i + 2] += normalZ * baseRelief;\n    }\n    \n    // Crear montañas lunares (cordilleras y picos)\n    const mountainCount = Math.floor(mountainHeight * 8);\n    const mountains: Array<{x: number, y: number, z: number, height: number, radius: number}> = [];\n    \n    for (let m = 0; m < mountainCount; m++) {\n      const phi = Math.random() * Math.PI;\n      const theta = Math.random() * Math.PI * 2;\n      const x = Math.sin(phi) * Math.cos(theta);\n      const y = Math.cos(phi);\n      const z = Math.sin(phi) * Math.sin(theta);\n      \n      mountains.push({\n        x, y, z,\n        height: 0.03 + Math.random() * 0.08,\n        radius: 0.1 + Math.random() * 0.2\n      });\n    }\n    \n    // Crear cráteres lunares realistas\n    const craterCount = Math.floor(craterDensity * 100);\n    const craters: Array<{x: number, y: number, z: number, depth: number, radius: number}> = [];\n    \n    for (let c = 0; c < craterCount; c++) {\n      const phi = Math.random() * Math.PI;\n      const theta = Math.random() * Math.PI * 2;\n      const x = Math.sin(phi) * Math.cos(theta);\n      const y = Math.cos(phi);\n      const z = Math.sin(phi) * Math.sin(theta);\n      \n      // Distribución realista de cráteres lunares\n      const sizeRandom = Math.random();\n      let radius, depth;\n      \n      if (sizeRandom < 0.7) {\n        // 70% cráteres pequeños\n        radius = 0.01 + Math.random() * 0.03;\n        depth = 0.003 + Math.random() * 0.01;\n      } else if (sizeRandom < 0.9) {\n        // 20% cráteres medianos\n        radius = 0.03 + Math.random() * 0.05;\n        depth = 0.008 + Math.random() * 0.02;\n      } else {\n        // 10% cráteres grandes\n        radius = 0.05 + Math.random() * 0.1;\n        depth = 0.015 + Math.random() * 0.03;\n      }\n      \n      craters.push({\n        x, y, z,\n        depth,\n        radius\n      });\n    }\n    \n    // Aplicar montañas y cráteres sobre el relieve base\n    for (let i = 0; i < positions.length; i += 3) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      const z = positions[i + 2];\n      \n      let totalEffect = 0;\n      \n      // Aplicar montañas\n      for (const mountain of mountains) {\n        const distance = Math.sqrt(\n          Math.pow(x - mountain.x, 2) + \n          Math.pow(y - mountain.y, 2) + \n          Math.pow(z - mountain.z, 2)\n        );\n        \n        if (distance < mountain.radius) {\n          const normalizedDistance = distance / mountain.radius;\n          const smoothTransition = Math.pow(1 - normalizedDistance, 2);\n          const mountainEffect = smoothTransition * mountain.height;\n          totalEffect += mountainEffect;\n        }\n      }\n      \n      // Aplicar cráteres\n      for (const crater of craters) {\n        const distance = Math.sqrt(\n          Math.pow(x - crater.x, 2) + \n          Math.pow(y - crater.y, 2) + \n          Math.pow(z - crater.z, 2)\n        );\n        \n        if (distance < crater.radius) {\n          const normalizedDistance = distance / crater.radius;\n          const smoothTransition = Math.pow(1 - normalizedDistance, 1.8);\n          const craterEffect = smoothTransition * crater.depth;\n          totalEffect -= craterEffect;\n        }\n      }\n      \n      // Aplicar el efecto a la posición\n      const normalX = normals[i];\n      const normalY = normals[i + 1];\n      const normalZ = normals[i + 2];\n      \n      positions[i] += normalX * totalEffect;\n      positions[i + 1] += normalY * totalEffect;\n      positions[i + 2] += normalZ * totalEffect;\n    }\n    \n    sphereGeometry.attributes.position.needsUpdate = true;\n    sphereGeometry.computeVertexNormals();\n    \n    return sphereGeometry;\n  }, [size, craterDensity, mountainHeight]);\n\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += delta * rotationSpeed;\n    }\n  });\n\n  return (\n    <mesh ref={meshRef} geometry={geometry}>\n      <meshStandardMaterial\n        color={color}\n        wireframe={wireframe}\n        metalness={metalness}\n        roughness={roughness}\n        normalScale={new THREE.Vector2(0.5, 0.5)}\n      />\n    </mesh>\n  );\n};\n\nconst Planet3D: React.FC<Planet3DProps> = ({\n  color = '#4a90e2',\n  size = 1,\n  lightIntensity = 1,\n  lightColor = '#ffffff',\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 1.0,\n  mountainHeight = 0.1\n}) => {\n  return (\n    <div className=\"planet-container\">\n      <Canvas\n        camera={{ position: [0, 0, 5], fov: 75 }}\n        style={{ width: '100%', height: '500px' }}\n      >\n        <ambientLight intensity={0.2} />\n        <directionalLight\n          position={[10, 10, 5]}\n          intensity={lightIntensity}\n          color={lightColor}\n        />\n        <pointLight position={[-10, -10, -5]} intensity={0.5} color={lightColor} />\n        \n        <PlanetMesh\n          color={color}\n          size={size}\n          rotationSpeed={rotationSpeed}\n          wireframe={wireframe}\n          metalness={metalness}\n          roughness={roughness}\n          craterDensity={craterDensity}\n          mountainHeight={mountainHeight}\n        />\n        \n        <OrbitControls\n          enablePan={true}\n          enableZoom={true}\n          enableRotate={true}\n          autoRotate={false}\n        />\n        \n        <Environment preset=\"night\" />\n      </Canvas>\n    </div>\n  );\n};\n\nexport default Planet3D;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}