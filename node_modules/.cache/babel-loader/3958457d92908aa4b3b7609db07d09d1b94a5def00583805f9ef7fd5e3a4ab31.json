{"ast":null,"code":"var _jsxFileName = \"/home/rober/space-apps/src/components/Planet3D.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\nimport './Planet3D.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlanetMesh = ({\n  color = '#4a90e2',\n  size = 1,\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 0.3,\n  mountainHeight = 0.1\n}) => {\n  _s();\n  const meshRef = useRef(null);\n\n  // Generar geometría procedural con solo cráteres y montañas\n  const geometry = useMemo(() => {\n    const sphereGeometry = new THREE.SphereGeometry(size, 128, 128);\n    const positions = sphereGeometry.attributes.position.array;\n    const normals = sphereGeometry.attributes.normal.array;\n\n    // Crear montañas específicas\n    const mountainCount = Math.floor(mountainHeight * 10);\n    const mountains = [];\n    for (let m = 0; m < mountainCount; m++) {\n      const phi = Math.random() * Math.PI;\n      const theta = Math.random() * Math.PI * 2;\n      const x = Math.sin(phi) * Math.cos(theta);\n      const y = Math.cos(phi);\n      const z = Math.sin(phi) * Math.sin(theta);\n      mountains.push({\n        x,\n        y,\n        z,\n        height: 0.05 + Math.random() * 0.1,\n        radius: 0.2 + Math.random() * 0.3\n      });\n    }\n\n    // Crear cráteres como la Luna - muchos pequeños y algunos grandes\n    const craterCount = Math.floor(craterDensity * 50); // Más cráteres\n    const craters = [];\n    for (let c = 0; c < craterCount; c++) {\n      const phi = Math.random() * Math.PI;\n      const theta = Math.random() * Math.PI * 2;\n      const x = Math.sin(phi) * Math.cos(theta);\n      const y = Math.cos(phi);\n      const z = Math.sin(phi) * Math.sin(theta);\n\n      // Distribución de tamaños como la Luna: muchos pequeños, pocos grandes\n      const sizeRandom = Math.random();\n      let radius, depth;\n      if (sizeRandom < 0.7) {\n        // 70% cráteres pequeños\n        radius = 0.02 + Math.random() * 0.05;\n        depth = 0.005 + Math.random() * 0.015;\n      } else if (sizeRandom < 0.9) {\n        // 20% cráteres medianos\n        radius = 0.05 + Math.random() * 0.08;\n        depth = 0.01 + Math.random() * 0.03;\n      } else {\n        // 10% cráteres grandes\n        radius = 0.08 + Math.random() * 0.15;\n        depth = 0.02 + Math.random() * 0.06;\n      }\n      craters.push({\n        x,\n        y,\n        z,\n        depth,\n        radius\n      });\n    }\n\n    // Aplicar solo montañas y cráteres\n    for (let i = 0; i < positions.length; i += 3) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      const z = positions[i + 2];\n      let totalEffect = 0;\n\n      // Aplicar montañas\n      for (const mountain of mountains) {\n        const distance = Math.sqrt(Math.pow(x - mountain.x, 2) + Math.pow(y - mountain.y, 2) + Math.pow(z - mountain.z, 2));\n        if (distance < mountain.radius) {\n          const mountainEffect = (mountain.radius - distance) / mountain.radius * mountain.height;\n          totalEffect += mountainEffect;\n        }\n      }\n\n      // Aplicar cráteres\n      for (const crater of craters) {\n        const distance = Math.sqrt(Math.pow(x - crater.x, 2) + Math.pow(y - crater.y, 2) + Math.pow(z - crater.z, 2));\n        if (distance < crater.radius) {\n          const craterEffect = (crater.radius - distance) / crater.radius * crater.depth;\n          totalEffect -= craterEffect;\n        }\n      }\n\n      // Aplicar el efecto a la posición\n      const normalX = normals[i];\n      const normalY = normals[i + 1];\n      const normalZ = normals[i + 2];\n      positions[i] += normalX * totalEffect;\n      positions[i + 1] += normalY * totalEffect;\n      positions[i + 2] += normalZ * totalEffect;\n    }\n    sphereGeometry.attributes.position.needsUpdate = true;\n    sphereGeometry.computeVertexNormals();\n    return sphereGeometry;\n  }, [size, craterDensity, mountainHeight]);\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += delta * rotationSpeed;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: meshRef,\n    geometry: geometry,\n    children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: color,\n      wireframe: wireframe,\n      metalness: metalness,\n      roughness: roughness,\n      normalScale: new THREE.Vector2(0.5, 0.5)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s(PlanetMesh, \"MielR1GGzeR4Ze9WbCt4SpjEbj8=\", false, function () {\n  return [useFrame];\n});\n_c = PlanetMesh;\nconst Planet3D = ({\n  color = '#4a90e2',\n  size = 1,\n  lightIntensity = 1,\n  lightColor = '#ffffff',\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 0.3,\n  mountainHeight = 0.1\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planet-container\",\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 5],\n        fov: 75\n      },\n      style: {\n        width: '100%',\n        height: '500px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n        position: [10, 10, 5],\n        intensity: lightIntensity,\n        color: lightColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [-10, -10, -5],\n        intensity: 0.5,\n        color: lightColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlanetMesh, {\n        color: color,\n        size: size,\n        rotationSpeed: rotationSpeed,\n        wireframe: wireframe,\n        metalness: metalness,\n        roughness: roughness,\n        craterDensity: craterDensity,\n        mountainHeight: mountainHeight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enablePan: true,\n        enableZoom: true,\n        enableRotate: true,\n        autoRotate: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Environment, {\n        preset: \"night\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Planet3D;\nexport default Planet3D;\nvar _c, _c2;\n$RefreshReg$(_c, \"PlanetMesh\");\n$RefreshReg$(_c2, \"Planet3D\");","map":{"version":3,"names":["React","useRef","useMemo","Canvas","useFrame","OrbitControls","Environment","THREE","jsxDEV","_jsxDEV","PlanetMesh","color","size","rotationSpeed","wireframe","metalness","roughness","craterDensity","mountainHeight","_s","meshRef","geometry","sphereGeometry","SphereGeometry","positions","attributes","position","array","normals","normal","mountainCount","Math","floor","mountains","m","phi","random","PI","theta","x","sin","cos","y","z","push","height","radius","craterCount","craters","c","sizeRandom","depth","i","length","totalEffect","mountain","distance","sqrt","pow","mountainEffect","crater","craterEffect","normalX","normalY","normalZ","needsUpdate","computeVertexNormals","state","delta","current","rotation","ref","children","normalScale","Vector2","fileName","_jsxFileName","lineNumber","columnNumber","_c","Planet3D","lightIntensity","lightColor","className","camera","fov","style","width","intensity","enablePan","enableZoom","enableRotate","autoRotate","preset","_c2","$RefreshReg$"],"sources":["/home/rober/space-apps/src/components/Planet3D.tsx"],"sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Sphere, OrbitControls, Environment } from '@react-three/drei';\nimport * as THREE from 'three';\nimport './Planet3D.css';\n\ninterface Planet3DProps {\n  color?: string;\n  size?: number;\n  lightIntensity?: number;\n  lightColor?: string;\n  rotationSpeed?: number;\n  wireframe?: boolean;\n  metalness?: number;\n  roughness?: number;\n  craterDensity?: number;\n  mountainHeight?: number;\n}\n\nconst PlanetMesh: React.FC<Planet3DProps> = ({ \n  color = '#4a90e2', \n  size = 1, \n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 0.3,\n  mountainHeight = 0.1\n}) => {\n  const meshRef = useRef<THREE.Mesh>(null);\n\n  // Generar geometría procedural con solo cráteres y montañas\n  const geometry = useMemo(() => {\n    const sphereGeometry = new THREE.SphereGeometry(size, 128, 128);\n    const positions = sphereGeometry.attributes.position.array as Float32Array;\n    const normals = sphereGeometry.attributes.normal.array as Float32Array;\n    \n    // Crear montañas específicas\n    const mountainCount = Math.floor(mountainHeight * 10);\n    const mountains: Array<{x: number, y: number, z: number, height: number, radius: number}> = [];\n    \n    for (let m = 0; m < mountainCount; m++) {\n      const phi = Math.random() * Math.PI;\n      const theta = Math.random() * Math.PI * 2;\n      const x = Math.sin(phi) * Math.cos(theta);\n      const y = Math.cos(phi);\n      const z = Math.sin(phi) * Math.sin(theta);\n      \n      mountains.push({\n        x, y, z,\n        height: 0.05 + Math.random() * 0.1,\n        radius: 0.2 + Math.random() * 0.3\n      });\n    }\n    \n    // Crear cráteres como la Luna - muchos pequeños y algunos grandes\n    const craterCount = Math.floor(craterDensity * 50); // Más cráteres\n    const craters: Array<{x: number, y: number, z: number, depth: number, radius: number}> = [];\n    \n    for (let c = 0; c < craterCount; c++) {\n      const phi = Math.random() * Math.PI;\n      const theta = Math.random() * Math.PI * 2;\n      const x = Math.sin(phi) * Math.cos(theta);\n      const y = Math.cos(phi);\n      const z = Math.sin(phi) * Math.sin(theta);\n      \n      // Distribución de tamaños como la Luna: muchos pequeños, pocos grandes\n      const sizeRandom = Math.random();\n      let radius, depth;\n      \n      if (sizeRandom < 0.7) {\n        // 70% cráteres pequeños\n        radius = 0.02 + Math.random() * 0.05;\n        depth = 0.005 + Math.random() * 0.015;\n      } else if (sizeRandom < 0.9) {\n        // 20% cráteres medianos\n        radius = 0.05 + Math.random() * 0.08;\n        depth = 0.01 + Math.random() * 0.03;\n      } else {\n        // 10% cráteres grandes\n        radius = 0.08 + Math.random() * 0.15;\n        depth = 0.02 + Math.random() * 0.06;\n      }\n      \n      craters.push({\n        x, y, z,\n        depth,\n        radius\n      });\n    }\n    \n    // Aplicar solo montañas y cráteres\n    for (let i = 0; i < positions.length; i += 3) {\n      const x = positions[i];\n      const y = positions[i + 1];\n      const z = positions[i + 2];\n      \n      let totalEffect = 0;\n      \n      // Aplicar montañas\n      for (const mountain of mountains) {\n        const distance = Math.sqrt(\n          Math.pow(x - mountain.x, 2) + \n          Math.pow(y - mountain.y, 2) + \n          Math.pow(z - mountain.z, 2)\n        );\n        \n        if (distance < mountain.radius) {\n          const mountainEffect = (mountain.radius - distance) / mountain.radius * mountain.height;\n          totalEffect += mountainEffect;\n        }\n      }\n      \n      // Aplicar cráteres\n      for (const crater of craters) {\n        const distance = Math.sqrt(\n          Math.pow(x - crater.x, 2) + \n          Math.pow(y - crater.y, 2) + \n          Math.pow(z - crater.z, 2)\n        );\n        \n        if (distance < crater.radius) {\n          const craterEffect = (crater.radius - distance) / crater.radius * crater.depth;\n          totalEffect -= craterEffect;\n        }\n      }\n      \n      // Aplicar el efecto a la posición\n      const normalX = normals[i];\n      const normalY = normals[i + 1];\n      const normalZ = normals[i + 2];\n      \n      positions[i] += normalX * totalEffect;\n      positions[i + 1] += normalY * totalEffect;\n      positions[i + 2] += normalZ * totalEffect;\n    }\n    \n    sphereGeometry.attributes.position.needsUpdate = true;\n    sphereGeometry.computeVertexNormals();\n    \n    return sphereGeometry;\n  }, [size, craterDensity, mountainHeight]);\n\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      meshRef.current.rotation.y += delta * rotationSpeed;\n    }\n  });\n\n  return (\n    <mesh ref={meshRef} geometry={geometry}>\n      <meshStandardMaterial\n        color={color}\n        wireframe={wireframe}\n        metalness={metalness}\n        roughness={roughness}\n        normalScale={new THREE.Vector2(0.5, 0.5)}\n      />\n    </mesh>\n  );\n};\n\nconst Planet3D: React.FC<Planet3DProps> = ({\n  color = '#4a90e2',\n  size = 1,\n  lightIntensity = 1,\n  lightColor = '#ffffff',\n  rotationSpeed = 1,\n  wireframe = false,\n  metalness = 0.1,\n  roughness = 0.8,\n  craterDensity = 0.3,\n  mountainHeight = 0.1\n}) => {\n  return (\n    <div className=\"planet-container\">\n      <Canvas\n        camera={{ position: [0, 0, 5], fov: 75 }}\n        style={{ width: '100%', height: '500px' }}\n      >\n        <ambientLight intensity={0.2} />\n        <directionalLight\n          position={[10, 10, 5]}\n          intensity={lightIntensity}\n          color={lightColor}\n        />\n        <pointLight position={[-10, -10, -5]} intensity={0.5} color={lightColor} />\n        \n        <PlanetMesh\n          color={color}\n          size={size}\n          rotationSpeed={rotationSpeed}\n          wireframe={wireframe}\n          metalness={metalness}\n          roughness={roughness}\n          craterDensity={craterDensity}\n          mountainHeight={mountainHeight}\n        />\n        \n        <OrbitControls\n          enablePan={true}\n          enableZoom={true}\n          enableRotate={true}\n          autoRotate={false}\n        />\n        \n        <Environment preset=\"night\" />\n      </Canvas>\n    </div>\n  );\n};\n\nexport default Planet3D;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}