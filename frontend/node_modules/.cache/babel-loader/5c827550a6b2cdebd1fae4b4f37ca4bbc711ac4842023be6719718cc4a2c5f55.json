{"ast":null,"code":"var _jsxFileName = \"/home/rober/space-apps/src/components/Planet3DGLB.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './Planet3D.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Planet3DGLB = ({\n  planetType = 'moon',\n  size = 1,\n  rotationSpeed = 1,\n  autoRotate = true,\n  shadowIntensity = 1,\n  environmentImage\n}) => {\n  _s();\n  const modelViewerRef = useRef(null);\n  const getPlanetPath = planet => {\n    switch (planet) {\n      case 'moon':\n        return '/glb_planets/Moon.glb';\n      case 'jupiter':\n        return '/glb_planets/Jupiter.glb';\n      default:\n        return '/glb_planets/Moon.glb';\n    }\n  };\n  useEffect(() => {\n    // Cargar el script de model-viewer si no está cargado\n    if (!document.querySelector('script[src*=\"model-viewer\"]')) {\n      const script = document.createElement('script');\n      script.type = 'module';\n      script.src = 'https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js';\n      document.head.appendChild(script);\n    }\n  }, []);\n  useEffect(() => {\n    if (modelViewerRef.current) {\n      const modelViewer = modelViewerRef.current;\n\n      // Configurar rotación automática\n      if (autoRotate) {\n        modelViewer.setAttribute('auto-rotate', '');\n        modelViewer.setAttribute('auto-rotate-delay', '0');\n      }\n\n      // Configurar velocidad de rotación\n      if (rotationSpeed !== 1) {\n        modelViewer.setAttribute('rotation-per-second', `${rotationSpeed}rad`);\n      }\n    }\n  }, [autoRotate, rotationSpeed]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planet-container\",\n    children: /*#__PURE__*/_jsxDEV(\"model-viewer\", {\n      ref: modelViewerRef,\n      src: getPlanetPath(planetType),\n      alt: `${planetType} 3D model`,\n      style: {\n        width: '100%',\n        height: '500px',\n        '--poster-color': 'transparent'\n      },\n      \"camera-controls\": true,\n      \"touch-action\": \"pan-y\",\n      \"shadow-intensity\": shadowIntensity,\n      \"environment-image\": environmentImage,\n      \"min-camera-orbit\": \"auto auto 1.5\",\n      \"max-camera-orbit\": \"auto auto 10\",\n      \"field-of-view\": \"45deg\",\n      \"camera-target\": \"0m 0m 0m\",\n      \"interaction-policy\": \"allow-when-focused\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Planet3DGLB, \"/hqT8OWd1+EiX03Npluenz/mCzI=\");\n_c = Planet3DGLB;\nexport default Planet3DGLB;\nvar _c;\n$RefreshReg$(_c, \"Planet3DGLB\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Planet3DGLB","planetType","size","rotationSpeed","autoRotate","shadowIntensity","environmentImage","_s","modelViewerRef","getPlanetPath","planet","document","querySelector","script","createElement","type","src","head","appendChild","current","modelViewer","setAttribute","className","children","ref","alt","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/rober/space-apps/src/components/Planet3DGLB.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './Planet3D.css';\n\ninterface Planet3DGLBProps {\n  planetType?: 'moon' | 'jupiter';\n  size?: number;\n  rotationSpeed?: number;\n  autoRotate?: boolean;\n  shadowIntensity?: number;\n  environmentImage?: string;\n}\n\nconst Planet3DGLB: React.FC<Planet3DGLBProps> = ({\n  planetType = 'moon',\n  size = 1,\n  rotationSpeed = 1,\n  autoRotate = true,\n  shadowIntensity = 1,\n  environmentImage\n}) => {\n  const modelViewerRef = useRef<any>(null);\n\n  const getPlanetPath = (planet: string) => {\n    switch (planet) {\n      case 'moon':\n        return '/glb_planets/Moon.glb';\n      case 'jupiter':\n        return '/glb_planets/Jupiter.glb';\n      default:\n        return '/glb_planets/Moon.glb';\n    }\n  };\n\n  useEffect(() => {\n    // Cargar el script de model-viewer si no está cargado\n    if (!document.querySelector('script[src*=\"model-viewer\"]')) {\n      const script = document.createElement('script');\n      script.type = 'module';\n      script.src = 'https://ajax.googleapis.com/ajax/libs/model-viewer/4.0.0/model-viewer.min.js';\n      document.head.appendChild(script);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (modelViewerRef.current) {\n      const modelViewer = modelViewerRef.current;\n      \n      // Configurar rotación automática\n      if (autoRotate) {\n        modelViewer.setAttribute('auto-rotate', '');\n        modelViewer.setAttribute('auto-rotate-delay', '0');\n      }\n\n      // Configurar velocidad de rotación\n      if (rotationSpeed !== 1) {\n        modelViewer.setAttribute('rotation-per-second', `${rotationSpeed}rad`);\n      }\n    }\n  }, [autoRotate, rotationSpeed]);\n\n  return (\n    <div className=\"planet-container\">\n      <model-viewer\n        ref={modelViewerRef}\n        src={getPlanetPath(planetType)}\n        alt={`${planetType} 3D model`}\n        style={{\n          width: '100%',\n          height: '500px',\n          '--poster-color': 'transparent'\n        }}\n        camera-controls\n        touch-action=\"pan-y\"\n        shadow-intensity={shadowIntensity}\n        environment-image={environmentImage}\n        min-camera-orbit=\"auto auto 1.5\"\n        max-camera-orbit=\"auto auto 10\"\n        field-of-view=\"45deg\"\n        camera-target=\"0m 0m 0m\"\n        interaction-policy=\"allow-when-focused\"\n      />\n    </div>\n  );\n};\n\nexport default Planet3DGLB;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWxB,MAAMC,WAAuC,GAAGA,CAAC;EAC/CC,UAAU,GAAG,MAAM;EACnBC,IAAI,GAAG,CAAC;EACRC,aAAa,GAAG,CAAC;EACjBC,UAAU,GAAG,IAAI;EACjBC,eAAe,GAAG,CAAC;EACnBC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,cAAc,GAAGX,MAAM,CAAM,IAAI,CAAC;EAExC,MAAMY,aAAa,GAAIC,MAAc,IAAK;IACxC,QAAQA,MAAM;MACZ,KAAK,MAAM;QACT,OAAO,uBAAuB;MAChC,KAAK,SAAS;QACZ,OAAO,0BAA0B;MACnC;QACE,OAAO,uBAAuB;IAClC;EACF,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACe,QAAQ,CAACC,aAAa,CAAC,6BAA6B,CAAC,EAAE;MAC1D,MAAMC,MAAM,GAAGF,QAAQ,CAACG,aAAa,CAAC,QAAQ,CAAC;MAC/CD,MAAM,CAACE,IAAI,GAAG,QAAQ;MACtBF,MAAM,CAACG,GAAG,GAAG,8EAA8E;MAC3FL,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACL,MAAM,CAAC;IACnC;EACF,CAAC,EAAE,EAAE,CAAC;EAENjB,SAAS,CAAC,MAAM;IACd,IAAIY,cAAc,CAACW,OAAO,EAAE;MAC1B,MAAMC,WAAW,GAAGZ,cAAc,CAACW,OAAO;;MAE1C;MACA,IAAIf,UAAU,EAAE;QACdgB,WAAW,CAACC,YAAY,CAAC,aAAa,EAAE,EAAE,CAAC;QAC3CD,WAAW,CAACC,YAAY,CAAC,mBAAmB,EAAE,GAAG,CAAC;MACpD;;MAEA;MACA,IAAIlB,aAAa,KAAK,CAAC,EAAE;QACvBiB,WAAW,CAACC,YAAY,CAAC,qBAAqB,EAAE,GAAGlB,aAAa,KAAK,CAAC;MACxE;IACF;EACF,CAAC,EAAE,CAACC,UAAU,EAAED,aAAa,CAAC,CAAC;EAE/B,oBACEJ,OAAA;IAAKuB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC/BxB,OAAA;MACEyB,GAAG,EAAEhB,cAAe;MACpBQ,GAAG,EAAEP,aAAa,CAACR,UAAU,CAAE;MAC/BwB,GAAG,EAAE,GAAGxB,UAAU,WAAY;MAC9ByB,KAAK,EAAE;QACLC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,OAAO;QACf,gBAAgB,EAAE;MACpB,CAAE;MACF,uBAAe;MACf,gBAAa,OAAO;MACpB,oBAAkBvB,eAAgB;MAClC,qBAAmBC,gBAAiB;MACpC,oBAAiB,eAAe;MAChC,oBAAiB,cAAc;MAC/B,iBAAc,OAAO;MACrB,iBAAc,UAAU;MACxB,sBAAmB;IAAoB;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACzB,EAAA,CAvEIP,WAAuC;AAAAiC,EAAA,GAAvCjC,WAAuC;AAyE7C,eAAeA,WAAW;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}